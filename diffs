app.py
38a39,51
> from glob import glob
> from json import load
> 
> '''
> This is a simple SDTP Server, designed primarily for illustrative purposes -- this server is configured
> by the two variables SDTP_PATH and TABLE_FACTORIES in conf.py.  See the documentation in sample_conf.py.
> This is a very thin overlay on the server in sdtp_server.py, with three major extensions:
> 1. a /, /help method which describes the available routes and required variables.
> 2. It searches the SDTP_PATH for tables, which are SDTP files
> 3.   
> '''
> 
> from conf import SDTP_PATH, TABLE_FACTORIES
45a59,108
> 
> #
> # Load any TABLE_FACTORIES before loading any tables, so nonstandard table types are recognized.
> # Very simple: just check to make sure that each item in TABLE_FACTORIES is keyed by a string
> # and the value is a genuine TableFactory class
> #
> 
> if TABLE_FACTORIES is not None and type(TABLE_FACTORIES) == dict:
>     for (table_type, factory) in TABLE_FACTORIES.items():
>         if type(table_type == str) and hasattr(factory, 'build_table'):
>             sdtp_server_blueprint.table_server.add_table_factory(table_type, factory)
> 
> #
> # Load a table.  filename is a valid path and a JSON file.
> # 
> 
> def _load_table(filename):
>     with open(filename, 'r') as fp:
>         table_dictionary = load(fp)
>         sdtp_server_blueprint.table_server.add_sdtp_table_from_dictionary(table_dictionary)
> 
> # 
> # Load all the tables on SDTP_PATH.  
> #
> 
> if SDTP_PATH is not None and len(SDTP_PATH) > 0:
>     for path in SDTP_PATH:
>         if os.path.exists(path) and os.path.isdir(path):
>             files = glob(f'{path}/*.json')
>             for filename in files:
>                 _load_table(filename)
> 
> 
> additional_routes = [
>      {"url": "/, /help", "headers": "", "method": "GET", "description": "print this message"},
>      {"url": "/cwd", "headers": "", "method": "GET", "description": "Show the working directory on the server"},
> ]
> 
> @app.route('/help', methods=['POST', 'GET'])
> @app.route('/', methods=['POST', 'GET'])
> def show_routes():
>     '''
>     Show the API for the table server
>     Arguments: None
>     '''
>     pages = sdtp_server_blueprint.ROUTES + additional_routes
>     page_strings = [f'<li>{page}</li>' for page in pages]
> 
>     return f'<body  style="font-family: Arial, Helvetica, Sans-Serif;"><h1>Supported Methods</h1><ul>{"".join(page_strings)}</ul></body>'
> 
sdtp_filter.py
67a68,82
> def check_valid_spec_return_boolean(filter_spec):
>     '''
>     Class method which checks to make sure that a filter spec is valid.
>     Returns True iff the filter_spec is valid.  Doesn't give a reason 
>     if it's invalid
> 
>     Arguments:
>         filter_spec: spec to test for validity
>     '''
>     try:
>         check_valid_spec(filter_spec)
>         return True
>     except InvalidDataException:
>         return False
> 
sdtp_server.py
50,51c50,51
< from json import JSONDecodeError, loads
< from glob import glob
---
> from json import JSONDecodeError, loads, load
> 
63,64c63
<     ColumnNotFoundException, build_table_spec, Table
< 
---
>     ColumnNotFoundException, Table
67,74d65
< def _paths_from_env():
<     # A little utility to get the paths from the environment
<     try:
<         paths = os.environ['SDTP_PATH']
<         return paths.split(':')
<     except KeyError:
<         return []
< 
83,103c74,92
< 
<     def init_tables(self, paths = None):
<         '''
<         Initialize the TableServer, reading files from the directories in the 
<         paths parameter.  If paths is None, reads the list of paths from the
<         SDTP_PATH variable in the environment.  To initialize with no tables,
<         just pass an empty list
<         Parameters:
<             paths: the list of paths to check for tables
<         Returns:
<             a JSON dump of the tables
<         '''
<         self.table_server = TableServer()
<         if paths is None:
<             paths = _paths_from_env()
<         paths = [path for path in paths if os.path.isdir(path)]
<         for path in paths:
<             files = glob(f'{path}/*.json')
<             for filename in files:
<                 self.table_server.add_sdtp_table(build_table_spec(filename))
<         return jsonify(self.table_server.get_auth_spec())
---
>         self.ROUTES = [
>             {"url": "/get_tables", "method": "GET", "headers": "<i>as required for authentication</i>",
>                 "description": 'Dumps a JSONIfied dictionary of the form:{table_name: <table_schema>}, where <table_schema> is a dictionary{"name": name, "type": type}'},
>             {"url": "/get_filtered_rows?table_name <i>string, required</i>", "method": "POST",
>                 "body": {"table": "<i> required, the name of the table to get the rows from<i/>",
>                         "columns": "<i> If  present, a list of the names of the columns to fetch</i>",
>                         "filter": "<i> optional, a filter_spec in the SDTP filter language"},
>                 "headers": "<i> as required for authentication</i>",
>                 "description": "Get the rows from table Table-Name (and, optionally, Dashboard-Name) which match filter Filter-Spec"},
>             {"url": "/get_range_spec?column_name <i>string, required</i>&table_name <i>string, required</i>", "method": "GET",
>                 "headers": "<i>as required for authentication</i>",
>                 "description": "Get the  minimum, and maximum values for column <i>column_name</i> in table <i>table_name</i>, returned as a dictionary {min_val, max_val}."},
>             {"url": "/get_all_values?column_name <i>string, required</i>&table_name <i>string, required</i>", "method": "GET",
>                 "headers": "<i>as required for authentication</i>",
>                 "description": "Get all the distinct values for column <i>column_name</i> in table <i>table_name</i>, returned as a sorted list.  Authentication variables should be in headers."},
>             {"url": "/get_table_spec", "method": "GET",
>                 "description": "Return the dictionary of table names and authorization variables"},
>             
>         ]
106c95
< sdtp_server_blueprint = STDPServer('sdtp_server', __name__)
---
> sdtp_server_blueprint = SDTPServer('sdtp_server', __name__)
419,473d407
< 
< 
< 
< 
< @sdtp_server_blueprint.route('/init', methods=['POST', 'GET'])
< def init_route():
<     '''
<     Target for the '/init' route.  This is just a front end on the init(paths) method,
<     extracting the paths to check from the parameter list (if present) or the SDTP_PATH
<     environment variable (if set)
< 
<     '''
<     request_paths = None
< 
<     params = request.args.getlist('paths') or request.form.getlist('paths')
<     if len(params) == 1 and ':' in params[0]:
<         request_paths = params[0].split(':')
<     elif len(params) > 0:
<         request_paths = params
< 
<     return sdtp_server_blueprint.init_tables(request_paths)
< 
< 
< @sdtp_server_blueprint.route('/help', methods=['POST', 'GET'])
< @sdtp_server_blueprint.route('/', methods=['POST', 'GET'])
< def show_routes():
<     '''
<     Show the API for the table server
<     Arguments: None
<     '''
<     pages = [
<         {"url": "/, /help", "headers": "", "method": "GET", "description": "print this message"},
<         {"url": "/get_tables", "method": "GET", "headers": "<i>as required for authentication</i>",
<          "description": 'Dumps a JSONIfied dictionary of the form:{table_name: <table_schema>}, where <table_schema> is a dictionary{"name": name, "type": type}'},
<         {"url": "/get_filtered_rows?table_name<i>string, required</i>", "method": "POST",
<          "body": {"table": "<i> required, the name of the table to get the rows from<i/>",
<                   "columns": "<i> If  present, a list of the names of the columns to fetch</i>",
<                   "filter": "<i> optional, a filter_spec in the SDTP filter language"},
<          "headers": "<i> as required for authentication</i>",
<          "description": "Get the rows from table Table-Name (and, optionally, Dashboard-Name) which match filter Filter-Spec"},
<         {"url": "/get_range_spec?column_name<i>string, required</i>&table_name<i>string, required</i>", "method": "GET",
<          "headers": "<i>as required for authentication</i>",
<          "description": "Get the  minimum, and maximumvalues for column <i>column_name</i> in table<i>table_name</i>, returned as a dictionary {min_val, max_val}."},
<         {"url": "/get_all_values?column_name<i>string, required</i>&table_name<i>string, required</i>", "method": "GET",
<          "headers": "<i>as required for authentication</i>",
<          "description": "Get all the distinct values for column <i>column_name</i> in table <i>table_name</i>, returned as a sorted list.  Authentication variables shjould be in headers."},
<         {"url": "/get_table_spec", "method": "GET",
<          "description": "Return the dictionary of table names and authorization variables"},
<         {"url": "/init?path<i>string, optional, multiple</i>", "method": ["GET", "POST"],
<          "description": "Restart the table server and load any initial tables.  Returns the list returned by /get_table_spec"},
< 
<     ]
<     page_strings = [f'<li>{page}</li>' for page in pages]
< 
<     return f'<ul>{"".join(page_strings)}</ul>'
sdtp_table.py
219a220,225
>     def to_dictionary(self):
>         '''
>         Return the dictionary  of this table, for saving on disk or transmission.
>         '''
>         raise InvalidDataException(f'to_dictionary has not been in {type(self)}.__name__')
>     
224c230,258
<         raise InvalidDataException(f'to_json has not been in {type(self)}.__name__')
---
>         # Since the columns are already a dictionary, they are simply directly jsonified.  For the rows,
>         # just use the jsonify methods from sdtp_utils
> 
>         return json.dumps(self.to_dictionary, indent = 2)
> 
> class SDTPTableFactory:
>     '''
>     A class which builds an SDTPTable of a specific type.  All SDTPTables have a schema, but after
>     that the specification varies, depending on the method the table uses to get the table rows.
>     Specific factories should subclass this and instantiate the class method build_table.
>     The tag is the table type, simply a string which indicates which class of table should be
>     built.
>     A new SDTPTableFactory class should be built for each concrete subclass of SDTPTable, and ideally
>     in the same file.  The SDTPTable subclass should put a "type" field in the intermediate form,
>     and the value of "type" should be the type built by the SDTP Table field
>     SDTPTableFactory is an abstract class -- each concrete subclass should call the init method on the 
>     table_type on initialization.  build_table is the method which actually builds the table; the superclass 
>     convenience version of the method throws an InvalidDataException if the spec has the wrong table type 
>     '''
>     def __init__(self, table_type):
>         self.table_type = table_type
>     
>     def build_table(self, table_spec):
>         if (table_spec["type"] != self.table_type):
>             raise InvalidDataException(f'Bad table type {table_spec["type"]} to build_table: expecting {self.table_type}')
>         return None
>         
> 
>        
345c379
<     def to_json(self):
---
>     def to_dictionary(self):
347c381
<         Return the JSON form of this table, for saving on disk or transmission.
---
>         Return the intermediate form of this table as a dictioary
349,354c383,385
<         # Since the columns are already a dictionary, they are simply directly jsonified.  For the rows,
<         # just use the jsonify methods from sdtp_utils
< 
<         return json.dumps({
<             "type": "SDTPTable",
<             "columns": self.schema,
---
>         return {
>             "type": "RowTable",
>             "schema": self.schema,
356,357c387,400
<         })
< 
---
>         }
>     
>     
> class RowTableFactory(SDTPTableFactory):
>     '''
>     A factory to build RowTables -- in fact, all SDTPFixedTables.  build_table is very simple, just instantiating
>     a RowTable on the rows and schema of the specification
>     '''
>     def __init__(self):
>         super(RowTableFactory, self).__init__('RowTable')
>     
>     def build_table(self, table_spec):
>         super(RowTableFactory, self).build_table(table_spec)
>         return RowTable(table_spec["schema"], table_spec["rows"])    
432,433c475,476
< 
<     def to_json(self):
---
>     
>     def to_dictionary(self):
441c484,496
<         }      
---
>         }   
> 
> class RemoteCSVTableFactory(SDTPTableFactory):
>     '''
>     A factory to build RemoteCSVTables.  build_table is very simple, just instantiating
>     a RemoteCSVTable on the url and schema of the specification
>     '''
>     def __init__(self):
>         super(RemoteCSVTableFactory, self).__init__('RemoteCSVTable')
>     
>     def build_table(self, table_spec):
>         super(RemoteCSVTableFactory, self).build_table(table_spec)
>         return RemoteCSVTable(table_spec["schema"], table_spec["url"])          
471a527,535
>     def to_dictionary(self):
>         return {
>             "name": self.table_name,
>             "type": "RemoteSDTPTable",
>             "schema": self.schema,
>             "url": self.url,
>             "headers": self.header_dict if self.header_dict is not None else {}
>         }
> 
519d582
< 
521d583
<         
641c703,714
<                     
---
> class RemoteSDTPTableFactory(SDTPTableFactory):
>     '''
>     A factory to build RemoteCSVTables.  build_table is very simple, just instantiating
>     a RemoteCSVTable on the url and schema of the specification
>     '''
>     def __init__(self):
>         super(RemoteSDTPTableFactory, self).__init__('RemoteSDTPTable')
>     
>     def build_table(self, table_spec):
>         super(RemoteSDTPTableFactory, self).build_table(table_spec)
>         header_dict = table_spec['header_dict'] if header_dict in table_spec.keys() else None
>         return RemoteSDTPTable(table_spec['table_name'], table_spec['schema'], table_spec['url'], header_dict)  
\ No newline at end of file
sdtp_utils.py
table_server.py
52c52
< from sdtp import RowTable
---
> from sdtp import RowTableFactory, RemoteCSVTableFactory, RemoteSDTPTableFactory
153c153
<     Read a RowTable from a JSON file and register it.  The
---
>     Read a Table from a JSON file and register it.  The
159a160
>             "type": type opf table
166,168d166
<     a row is a list of lists values, each list the same length as the schema, and
<        each value is of the type specified for the corresponding entry of
<        the schema.  Date, Time, and Datetime entries ate in isoformat.
179,185c177
<     row_table = RowTable(table["schema"], table["rows"])
<     headers = table_spec['headers'] if 'headers' in table_spec else []
<     return {
<         "name": table_spec["name"],
<         "table": Table(row_table, headers)
<     }
< 
---
>     
189a182,187
> def _check_dict_and_keys(dictionary, keys, dict_message, dict_name):
>     _check_type(dictionary, dict, dict_message)
>     missing_keys = keys - dictionary.keys()
>     assert len(missing_keys) == 0, f'{dict_name} is missing keys {missing_keys}'
> 
> 
194,196c192
<     _check_type(table_spec, dict, 'table_spec must be a dictionary, not')
<     missing_keys = {'name', 'table'} - table_spec.keys()
<     assert len(missing_keys) == 0, f'table_spec is missing keys {missing_keys}'
---
>     _check_dict_and_keys(table_spec, {'name', 'table'}, 'table_spec must be a dictionary not', 'table_spec')
199a196,204
> def _check_valid_form(table_form):
>     # Make sure a table_form is a dictionary with two entries, a name and a table,
>     # and the type of name is a string, the type of table is a dictionary, and the 
>     # table dictionary contains fields schema and type
>     _check_dict_and_keys(table_form, {'name', 'table'}, 'table_form must be a dictionary not', 'table_form')
>     _check_type(table_form["name"], str, 'The name in table_form must be a string, not')
>     _check_dict_and_keys(table_form['table'], {'type', 'schema'}, 'table_form["table"] must be a dictionary not', 'table_form')
> 
> 
209a215,231
>         self.factories = {}
>         # factories which are part of the standard  distribution
>         self.add_table_factory('RowTable', RowTableFactory())
>         self.add_table_factory('RemoteSDTPTable', RemoteSDTPTableFactory())
>         self.add_table_factory('RemoteCSVTable', RemoteCSVTableFactory())
> 
> 
>     def add_table_factory(self, table_type, table_factory):
>         '''
>         Add a TableFactory for table type table_type.  When 
>         self.add_table_from_dictionary(table_spec) is called, the appropriate 
>         factory is called to build it
>         Arguments:
>            table_type: a string indicating the table type
>            table_factory: an instance of a subclass of TableFactory which actually builds the table
>         '''
>         self.factories[table_type] = table_factory
262a285,309
> 
>     def add_sdtp_table_from_dictionary(self, table_dictionary):
>         '''
>         Add an  SDTPTable from a dictionary (intermediate on-disk form).  The intermediate form has
>         a name and a table dictionary.  The table dictionary has fields schema and type, and then type-
>         specific fields.  Calls self.factories[table_dictionary["table"]["type"]] to build the table,
>         then calls self.add_sdtp_table to add the table.
>         Raises an InvalidDataException if self.add_table_spec raises it or if the factory 
>         is not present, or if the factory raises an exception
> 
>         Arguments:
>             table_dictionary: dictionary of the form {"name", "table"}, where table is a table specification: a dictionary
>                              with the fields type and schema
> 
>         '''
>         _check_valid_form(table_dictionary)
>         name = table_dictionary['name']
>         table_dict = table_dictionary['table']
>         table_type = table_dict['type']
>         if table_type in self.factories.keys():
>             table = self.factories[table_type].build_table(table_dict)
>             self.add_sdtp_table({"name": name, "table": Table(table)})
>         else:
>             raise InvalidDataException(f'No factory registered for {table_type}')
> 
331a379,381
>         
> 
> 
